// libs
import bcrypt from 'bcrypt';
import { Router } from 'express'; // modules
// import passport from '../passport.js';

import { newToken } from '../utils/auth.js';
import UserModel from '../models/UserModel.js'; // router init

const router = Router(); // router

router.post('/login', (req, res) => {
  // find the user
  UserModel.findOne({
    username: req.body.username
  }).then(user => {
    // non registered user
    if (!user) {
      res.status(401).send('Authentication failed. User not found.');
    }

    bcrypt.compare(req.body.password, user.password, (error, result) => {
      if (error) {
        res.status(500).send('Internal Server Error');
      }

      if (result) {
        // create token with user info
        const token = newToken(user); // current logged-in user

        const loggedInUser = {
          username: user.username,
          nickname: user.nickname
        }; // return the information including token as JSON

        res.status(200).json({
          success: true,
          user: loggedInUser,
          message: 'Login Success',
          token: token
        });
      } else {
        res.status(401).json('Authentication failed. Wrong password.');
      }
    });
  }).catch(error => {
    res.status(500).json('Internal Server Error');
    throw error;
  });
});
router.post('/signup', (req, res) => {
  const {
    username,
    password,
    nickname
  } = req.body; // encrypt password
  // NOTE: 10 is saltround which is a cost factor

  bcrypt.hash(password, 10, (error, hashedPassword) => {
    if (error) {
      console.log(error);
      return res.status(500).json({
        error
      });
    } else {
      const newUser = new UserModel({
        username,
        password: hashedPassword,
        nickname
      });
      newUser.save((error, saved) => {
        if (error) {
          console.log(error);
          res.status(409).send(error);
        } else {
          console.log(saved);
          res.send(saved);
        }
      });
    }
  });
}); // TODO: Logout 구현 필요

export default router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvYXV0aC5qcyJdLCJuYW1lcyI6WyJiY3J5cHQiLCJSb3V0ZXIiLCJuZXdUb2tlbiIsIlVzZXJNb2RlbCIsInJvdXRlciIsInBvc3QiLCJyZXEiLCJyZXMiLCJmaW5kT25lIiwidXNlcm5hbWUiLCJib2R5IiwidGhlbiIsInVzZXIiLCJzdGF0dXMiLCJzZW5kIiwiY29tcGFyZSIsInBhc3N3b3JkIiwiZXJyb3IiLCJyZXN1bHQiLCJ0b2tlbiIsImxvZ2dlZEluVXNlciIsIm5pY2tuYW1lIiwianNvbiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiY2F0Y2giLCJoYXNoIiwiaGFzaGVkUGFzc3dvcmQiLCJjb25zb2xlIiwibG9nIiwibmV3VXNlciIsInNhdmUiLCJzYXZlZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxNQUFQLE1BQW1CLFFBQW5CO0FBQ0EsU0FBU0MsTUFBVCxRQUF1QixTQUF2QixDLENBRUE7QUFDQTs7QUFDQSxTQUFTQyxRQUFULFFBQXlCLGtCQUF6QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0Isd0JBQXRCLEMsQ0FFQTs7QUFDQSxNQUFNQyxNQUFNLEdBQUdILE1BQU0sRUFBckIsQyxDQUVBOztBQUNBRyxNQUFNLENBQUNDLElBQVAsQ0FBWSxRQUFaLEVBQXNCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ2xDO0FBQ0FKLEVBQUFBLFNBQVMsQ0FBQ0ssT0FBVixDQUFrQjtBQUNoQkMsSUFBQUEsUUFBUSxFQUFFSCxHQUFHLENBQUNJLElBQUosQ0FBU0Q7QUFESCxHQUFsQixFQUdHRSxJQUhILENBR1FDLElBQUksSUFBSTtBQUNaO0FBQ0EsUUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVEwsTUFBQUEsR0FBRyxDQUFDTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUIsd0NBQXJCO0FBQ0Q7O0FBQ0RkLElBQUFBLE1BQU0sQ0FBQ2UsT0FBUCxDQUFlVCxHQUFHLENBQUNJLElBQUosQ0FBU00sUUFBeEIsRUFBa0NKLElBQUksQ0FBQ0ksUUFBdkMsRUFBaUQsQ0FBQ0MsS0FBRCxFQUFRQyxNQUFSLEtBQW1CO0FBQ2xFLFVBQUlELEtBQUosRUFBVztBQUNUVixRQUFBQSxHQUFHLENBQUNNLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQix1QkFBckI7QUFDRDs7QUFDRCxVQUFJSSxNQUFKLEVBQVk7QUFDVjtBQUNBLGNBQU1DLEtBQUssR0FBR2pCLFFBQVEsQ0FBQ1UsSUFBRCxDQUF0QixDQUZVLENBSVY7O0FBQ0EsY0FBTVEsWUFBWSxHQUFHO0FBQ25CWCxVQUFBQSxRQUFRLEVBQUVHLElBQUksQ0FBQ0gsUUFESTtBQUVuQlksVUFBQUEsUUFBUSxFQUFFVCxJQUFJLENBQUNTO0FBRkksU0FBckIsQ0FMVSxDQVVWOztBQUNBZCxRQUFBQSxHQUFHLENBQUNNLE1BQUosQ0FBVyxHQUFYLEVBQWdCUyxJQUFoQixDQUFxQjtBQUNuQkMsVUFBQUEsT0FBTyxFQUFFLElBRFU7QUFFbkJYLFVBQUFBLElBQUksRUFBRVEsWUFGYTtBQUduQkksVUFBQUEsT0FBTyxFQUFFLGVBSFU7QUFJbkJMLFVBQUFBLEtBQUssRUFBRUE7QUFKWSxTQUFyQjtBQU1ELE9BakJELE1BaUJPO0FBQ0xaLFFBQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXLEdBQVgsRUFBZ0JTLElBQWhCLENBQXFCLHdDQUFyQjtBQUNEO0FBQ0YsS0F4QkQ7QUF5QkQsR0FqQ0gsRUFrQ0dHLEtBbENILENBa0NTUixLQUFLLElBQUk7QUFDZFYsSUFBQUEsR0FBRyxDQUFDTSxNQUFKLENBQVcsR0FBWCxFQUFnQlMsSUFBaEIsQ0FBcUIsdUJBQXJCO0FBQ0EsVUFBTUwsS0FBTjtBQUNELEdBckNIO0FBc0NELENBeENEO0FBMENBYixNQUFNLENBQUNDLElBQVAsQ0FBWSxTQUFaLEVBQXVCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ25DLFFBQU07QUFBRUUsSUFBQUEsUUFBRjtBQUFZTyxJQUFBQSxRQUFaO0FBQXNCSyxJQUFBQTtBQUF0QixNQUFtQ2YsR0FBRyxDQUFDSSxJQUE3QyxDQURtQyxDQUVuQztBQUNBOztBQUNBVixFQUFBQSxNQUFNLENBQUMwQixJQUFQLENBQVlWLFFBQVosRUFBc0IsRUFBdEIsRUFBMEIsQ0FBQ0MsS0FBRCxFQUFRVSxjQUFSLEtBQTJCO0FBQ25ELFFBQUlWLEtBQUosRUFBVztBQUNUVyxNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVosS0FBWjtBQUNBLGFBQU9WLEdBQUcsQ0FBQ00sTUFBSixDQUFXLEdBQVgsRUFBZ0JTLElBQWhCLENBQXFCO0FBQzFCTCxRQUFBQTtBQUQwQixPQUFyQixDQUFQO0FBR0QsS0FMRCxNQUtPO0FBQ0wsWUFBTWEsT0FBTyxHQUFHLElBQUkzQixTQUFKLENBQWM7QUFDNUJNLFFBQUFBLFFBRDRCO0FBRTVCTyxRQUFBQSxRQUFRLEVBQUVXLGNBRmtCO0FBRzVCTixRQUFBQTtBQUg0QixPQUFkLENBQWhCO0FBS0FTLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQUNkLEtBQUQsRUFBUWUsS0FBUixLQUFrQjtBQUM3QixZQUFJZixLQUFKLEVBQVc7QUFDVFcsVUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlaLEtBQVo7QUFDQVYsVUFBQUEsR0FBRyxDQUFDTSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUJHLEtBQXJCO0FBQ0QsU0FIRCxNQUdPO0FBQ0xXLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxLQUFaO0FBQ0F6QixVQUFBQSxHQUFHLENBQUNPLElBQUosQ0FBU2tCLEtBQVQ7QUFDRDtBQUNGLE9BUkQ7QUFTRDtBQUNGLEdBdEJEO0FBdUJELENBM0JELEUsQ0E2QkE7O0FBRUEsZUFBZTVCLE1BQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWJzXHJcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcclxuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XHJcblxyXG4vLyBtb2R1bGVzXHJcbi8vIGltcG9ydCBwYXNzcG9ydCBmcm9tICcuLi9wYXNzcG9ydC5qcyc7XHJcbmltcG9ydCB7IG5ld1Rva2VuIH0gZnJvbSAnLi4vdXRpbHMvYXV0aC5qcyc7XHJcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1VzZXJNb2RlbC5qcyc7XHJcblxyXG4vLyByb3V0ZXIgaW5pdFxyXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcclxuXHJcbi8vIHJvdXRlclxyXG5yb3V0ZXIucG9zdCgnL2xvZ2luJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgLy8gZmluZCB0aGUgdXNlclxyXG4gIFVzZXJNb2RlbC5maW5kT25lKHtcclxuICAgIHVzZXJuYW1lOiByZXEuYm9keS51c2VybmFtZSxcclxuICB9KVxyXG4gICAgLnRoZW4odXNlciA9PiB7XHJcbiAgICAgIC8vIG5vbiByZWdpc3RlcmVkIHVzZXJcclxuICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoJ0F1dGhlbnRpY2F0aW9uIGZhaWxlZC4gVXNlciBub3QgZm91bmQuJyk7XHJcbiAgICAgIH1cclxuICAgICAgYmNyeXB0LmNvbXBhcmUocmVxLmJvZHkucGFzc3dvcmQsIHVzZXIucGFzc3dvcmQsIChlcnJvciwgcmVzdWx0KSA9PiB7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCgnSW50ZXJuYWwgU2VydmVyIEVycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgIC8vIGNyZWF0ZSB0b2tlbiB3aXRoIHVzZXIgaW5mb1xyXG4gICAgICAgICAgY29uc3QgdG9rZW4gPSBuZXdUb2tlbih1c2VyKTtcclxuXHJcbiAgICAgICAgICAvLyBjdXJyZW50IGxvZ2dlZC1pbiB1c2VyXHJcbiAgICAgICAgICBjb25zdCBsb2dnZWRJblVzZXIgPSB7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICBuaWNrbmFtZTogdXNlci5uaWNrbmFtZSxcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgdG9rZW4gYXMgSlNPTlxyXG4gICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICB1c2VyOiBsb2dnZWRJblVzZXIsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdMb2dpbiBTdWNjZXNzJyxcclxuICAgICAgICAgICAgdG9rZW46IHRva2VuLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKCdBdXRoZW50aWNhdGlvbiBmYWlsZWQuIFdyb25nIHBhc3N3b3JkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oJ0ludGVybmFsIFNlcnZlciBFcnJvcicpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbnJvdXRlci5wb3N0KCcvc2lnbnVwJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIG5pY2tuYW1lIH0gPSByZXEuYm9keTtcclxuICAvLyBlbmNyeXB0IHBhc3N3b3JkXHJcbiAgLy8gTk9URTogMTAgaXMgc2FsdHJvdW5kIHdoaWNoIGlzIGEgY29zdCBmYWN0b3JcclxuICBiY3J5cHQuaGFzaChwYXNzd29yZCwgMTAsIChlcnJvciwgaGFzaGVkUGFzc3dvcmQpID0+IHtcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgICAgZXJyb3IsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgbmV3VXNlciA9IG5ldyBVc2VyTW9kZWwoe1xyXG4gICAgICAgIHVzZXJuYW1lLFxyXG4gICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcclxuICAgICAgICBuaWNrbmFtZSxcclxuICAgICAgfSk7XHJcbiAgICAgIG5ld1VzZXIuc2F2ZSgoZXJyb3IsIHNhdmVkKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICByZXMuc3RhdHVzKDQwOSkuc2VuZChlcnJvcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHNhdmVkKTtcclxuICAgICAgICAgIHJlcy5zZW5kKHNhdmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8vIFRPRE86IExvZ291dCDqtaztmIQg7ZWE7JqUXHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XHJcbiJdfQ==