// json related
import jwt from 'jsonwebtoken';
import { SECRET_KEY, EXPIRATION_DATE } from '../config'; // modules

import UserModel from '../models/UserModel.js';
export const newToken = user => {
  const payload = {
    username: user.username,
    _id: user._id
  };
  return jwt.sign(payload, SECRET_KEY, {
    expiresIn: EXPIRATION_DATE
  });
};
export const verifyToken = token => new Promise((resolve, reject) => {
  jwt.verify(token, SECRET_KEY, (err, payload) => {
    if (err) return reject(err);
    resolve(payload);
  });
}); // middleware

export const authenticateUser = async (req, res, next) => {
  if (!req.headers.authorization) {
    return res.status(401).json({
      message: 'token must be included'
    });
  }

  const token = req.headers.authorization;
  let payload;

  try {
    payload = await verifyToken(token);
  } catch (e) {
    return res.status(401).json({
      message: 'token is invalid'
    });
  }

  const user = await UserModel.findById(payload._id).select('-password').lean().exec();

  if (!user) {
    return res.status(401).json({
      message: 'user is not found'
    });
  }

  req.user = user;
  next();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hdXRoLmpzIl0sIm5hbWVzIjpbImp3dCIsIlNFQ1JFVF9LRVkiLCJFWFBJUkFUSU9OX0RBVEUiLCJVc2VyTW9kZWwiLCJuZXdUb2tlbiIsInVzZXIiLCJwYXlsb2FkIiwidXNlcm5hbWUiLCJfaWQiLCJzaWduIiwiZXhwaXJlc0luIiwidmVyaWZ5VG9rZW4iLCJ0b2tlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidmVyaWZ5IiwiZXJyIiwiYXV0aGVudGljYXRlVXNlciIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwiZSIsImZpbmRCeUlkIiwic2VsZWN0IiwibGVhbiIsImV4ZWMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBT0EsR0FBUCxNQUFnQixjQUFoQjtBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLGVBQXJCLFFBQTRDLFdBQTVDLEMsQ0FDQTs7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLHdCQUF0QjtBQUVBLE9BQU8sTUFBTUMsUUFBUSxHQUFHQyxJQUFJLElBQUk7QUFDOUIsUUFBTUMsT0FBTyxHQUFHO0FBQ2RDLElBQUFBLFFBQVEsRUFBRUYsSUFBSSxDQUFDRSxRQUREO0FBRWRDLElBQUFBLEdBQUcsRUFBRUgsSUFBSSxDQUFDRztBQUZJLEdBQWhCO0FBSUEsU0FBT1IsR0FBRyxDQUFDUyxJQUFKLENBQVNILE9BQVQsRUFBa0JMLFVBQWxCLEVBQThCO0FBQ25DUyxJQUFBQSxTQUFTLEVBQUVSO0FBRHdCLEdBQTlCLENBQVA7QUFHRCxDQVJNO0FBVVAsT0FBTyxNQUFNUyxXQUFXLEdBQUdDLEtBQUssSUFDOUIsSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUMvQmYsRUFBQUEsR0FBRyxDQUFDZ0IsTUFBSixDQUFXSixLQUFYLEVBQWtCWCxVQUFsQixFQUE4QixDQUFDZ0IsR0FBRCxFQUFNWCxPQUFOLEtBQWtCO0FBQzlDLFFBQUlXLEdBQUosRUFBUyxPQUFPRixNQUFNLENBQUNFLEdBQUQsQ0FBYjtBQUNUSCxJQUFBQSxPQUFPLENBQUNSLE9BQUQsQ0FBUDtBQUNELEdBSEQ7QUFJRCxDQUxELENBREssQyxDQVFQOztBQUNBLE9BQU8sTUFBTVksZ0JBQWdCLEdBQUcsT0FBT0MsR0FBUCxFQUFZQyxHQUFaLEVBQWlCQyxJQUFqQixLQUEwQjtBQUN4RCxNQUFJLENBQUNGLEdBQUcsQ0FBQ0csT0FBSixDQUFZQyxhQUFqQixFQUFnQztBQUM5QixXQUFPSCxHQUFHLENBQUNJLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFQyxNQUFBQSxPQUFPLEVBQUU7QUFBWCxLQUFyQixDQUFQO0FBQ0Q7O0FBRUQsUUFBTWQsS0FBSyxHQUFHTyxHQUFHLENBQUNHLE9BQUosQ0FBWUMsYUFBMUI7QUFDQSxNQUFJakIsT0FBSjs7QUFDQSxNQUFJO0FBQ0ZBLElBQUFBLE9BQU8sR0FBRyxNQUFNSyxXQUFXLENBQUNDLEtBQUQsQ0FBM0I7QUFDRCxHQUZELENBRUUsT0FBT2UsQ0FBUCxFQUFVO0FBQ1YsV0FBT1AsR0FBRyxDQUFDSSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsTUFBQUEsT0FBTyxFQUFFO0FBQVgsS0FBckIsQ0FBUDtBQUNEOztBQUVELFFBQU1yQixJQUFJLEdBQUcsTUFBTUYsU0FBUyxDQUFDeUIsUUFBVixDQUFtQnRCLE9BQU8sQ0FBQ0UsR0FBM0IsRUFDaEJxQixNQURnQixDQUNULFdBRFMsRUFFaEJDLElBRmdCLEdBR2hCQyxJQUhnQixFQUFuQjs7QUFLQSxNQUFJLENBQUMxQixJQUFMLEVBQVc7QUFDVCxXQUFPZSxHQUFHLENBQUNJLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFQyxNQUFBQSxPQUFPLEVBQUU7QUFBWCxLQUFyQixDQUFQO0FBQ0Q7O0FBRURQLEVBQUFBLEdBQUcsQ0FBQ2QsSUFBSixHQUFXQSxJQUFYO0FBQ0FnQixFQUFBQSxJQUFJO0FBQ0wsQ0F4Qk0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqc29uIHJlbGF0ZWRcclxuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xyXG5pbXBvcnQgeyBTRUNSRVRfS0VZLCBFWFBJUkFUSU9OX0RBVEUgfSBmcm9tICcuLi9jb25maWcnO1xyXG4vLyBtb2R1bGVzXHJcbmltcG9ydCBVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1VzZXJNb2RlbC5qcyc7XHJcblxyXG5leHBvcnQgY29uc3QgbmV3VG9rZW4gPSB1c2VyID0+IHtcclxuICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsXHJcbiAgICBfaWQ6IHVzZXIuX2lkLFxyXG4gIH07XHJcbiAgcmV0dXJuIGp3dC5zaWduKHBheWxvYWQsIFNFQ1JFVF9LRVksIHtcclxuICAgIGV4cGlyZXNJbjogRVhQSVJBVElPTl9EQVRFLFxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHZlcmlmeVRva2VuID0gdG9rZW4gPT5cclxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBqd3QudmVyaWZ5KHRva2VuLCBTRUNSRVRfS0VZLCAoZXJyLCBwYXlsb2FkKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuLy8gbWlkZGxld2FyZVxyXG5leHBvcnQgY29uc3QgYXV0aGVudGljYXRlVXNlciA9IGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gIGlmICghcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbikge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ3Rva2VuIG11c3QgYmUgaW5jbHVkZWQnIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uO1xyXG4gIGxldCBwYXlsb2FkO1xyXG4gIHRyeSB7XHJcbiAgICBwYXlsb2FkID0gYXdhaXQgdmVyaWZ5VG9rZW4odG9rZW4pO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IG1lc3NhZ2U6ICd0b2tlbiBpcyBpbnZhbGlkJyB9KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyTW9kZWwuZmluZEJ5SWQocGF5bG9hZC5faWQpXHJcbiAgICAuc2VsZWN0KCctcGFzc3dvcmQnKVxyXG4gICAgLmxlYW4oKVxyXG4gICAgLmV4ZWMoKTtcclxuXHJcbiAgaWYgKCF1c2VyKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAndXNlciBpcyBub3QgZm91bmQnIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVxLnVzZXIgPSB1c2VyO1xyXG4gIG5leHQoKTtcclxufTtcclxuIl19