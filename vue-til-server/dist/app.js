// libs
import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import morgan from "morgan";
import mongoose from "mongoose";
import detectPort from "detect-port";
import chalk from "chalk"; // api

import auth from "./api/auth.js";
import posts from "./api/posts.js";
import docs from "./utils/api-doc.js"; // utils

import { authenticateUser } from "./utils/auth.js"; // mongo db

const db = mongoose.connection;
db.on("error", console.error.bind(console, "MongoDB connection error:"));
mongoose.connect("mongodb+srv://test:1234@cluster0.mnq5t.mongodb.net/myFirstDatabase?retryWrites=true&w=majority", {
  useNewUrlParser: true
});
mongoose.Promise = global.Promise; // server setup

let port;

async function configServer() {
  port = 3000 || (await detectPort(3000));
}

configServer(); // express setup

const app = express();
app.use(cors());
app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(bodyParser.json());
app.use(morgan("dev")); // log request
// express routers

app.use("/", auth);
app.use("/posts", authenticateUser, posts); // api docs

app.use("/api", docs); // start

app.listen(port, () => console.log(`${chalk.white.bgHex("#41b883").bold(`VUE TIL SERVER IS RUNNING ON ${port}`)}`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsImNvcnMiLCJib2R5UGFyc2VyIiwibW9yZ2FuIiwibW9uZ29vc2UiLCJkZXRlY3RQb3J0IiwiY2hhbGsiLCJhdXRoIiwicG9zdHMiLCJkb2NzIiwiYXV0aGVudGljYXRlVXNlciIsImRiIiwiY29ubmVjdGlvbiIsIm9uIiwiY29uc29sZSIsImVycm9yIiwiYmluZCIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJQcm9taXNlIiwiZ2xvYmFsIiwicG9ydCIsImNvbmZpZ1NlcnZlciIsImFwcCIsInVzZSIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImpzb24iLCJsaXN0ZW4iLCJsb2ciLCJ3aGl0ZSIsImJnSGV4IiwiYm9sZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxPQUFQLE1BQW9CLFNBQXBCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsYUFBdkI7QUFDQSxPQUFPQyxNQUFQLE1BQW1CLFFBQW5CO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixVQUFyQjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsYUFBdkI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCLEMsQ0FFQTs7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLGVBQWpCO0FBQ0EsT0FBT0MsS0FBUCxNQUFrQixnQkFBbEI7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLG9CQUFqQixDLENBRUE7O0FBQ0EsU0FBU0MsZ0JBQVQsUUFBaUMsaUJBQWpDLEMsQ0FFQTs7QUFDQSxNQUFNQyxFQUFFLEdBQUdQLFFBQVEsQ0FBQ1EsVUFBcEI7QUFDQUQsRUFBRSxDQUFDRSxFQUFILENBQU0sT0FBTixFQUFlQyxPQUFPLENBQUNDLEtBQVIsQ0FBY0MsSUFBZCxDQUFtQkYsT0FBbkIsRUFBNEIsMkJBQTVCLENBQWY7QUFDQVYsUUFBUSxDQUFDYSxPQUFULENBQ0UsZ0dBREYsRUFFRTtBQUNFQyxFQUFBQSxlQUFlLEVBQUU7QUFEbkIsQ0FGRjtBQU1BZCxRQUFRLENBQUNlLE9BQVQsR0FBbUJDLE1BQU0sQ0FBQ0QsT0FBMUIsQyxDQUVBOztBQUNBLElBQUlFLElBQUo7O0FBQ0EsZUFBZUMsWUFBZixHQUE4QjtBQUM1QkQsRUFBQUEsSUFBSSxHQUFHLFNBQVMsTUFBTWhCLFVBQVUsQ0FBQyxJQUFELENBQXpCLENBQVA7QUFDRDs7QUFDRGlCLFlBQVksRyxDQUVaOztBQUNBLE1BQU1DLEdBQUcsR0FBR3ZCLE9BQU8sRUFBbkI7QUFDQXVCLEdBQUcsQ0FBQ0MsR0FBSixDQUFRdkIsSUFBSSxFQUFaO0FBQ0FzQixHQUFHLENBQUNDLEdBQUosQ0FBUXRCLFVBQVUsQ0FBQ3VCLFVBQVgsQ0FBc0I7QUFBRUMsRUFBQUEsUUFBUSxFQUFFO0FBQVosQ0FBdEIsQ0FBUjtBQUNBSCxHQUFHLENBQUNDLEdBQUosQ0FBUXRCLFVBQVUsQ0FBQ3lCLElBQVgsRUFBUjtBQUNBSixHQUFHLENBQUNDLEdBQUosQ0FBUXJCLE1BQU0sQ0FBQyxLQUFELENBQWQsRSxDQUF3QjtBQUV4Qjs7QUFDQW9CLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLEdBQVIsRUFBYWpCLElBQWI7QUFDQWdCLEdBQUcsQ0FBQ0MsR0FBSixDQUFRLFFBQVIsRUFBa0JkLGdCQUFsQixFQUFvQ0YsS0FBcEMsRSxDQUVBOztBQUNBZSxHQUFHLENBQUNDLEdBQUosQ0FBUSxNQUFSLEVBQWdCZixJQUFoQixFLENBRUE7O0FBQ0FjLEdBQUcsQ0FBQ0ssTUFBSixDQUFXUCxJQUFYLEVBQWlCLE1BQ2ZQLE9BQU8sQ0FBQ2UsR0FBUixDQUNHLEdBQUV2QixLQUFLLENBQUN3QixLQUFOLENBQ0FDLEtBREEsQ0FDTSxTQUROLEVBRUFDLElBRkEsQ0FFTSxnQ0FBK0JYLElBQUssRUFGMUMsQ0FFNkMsRUFIbEQsQ0FERiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYnNcclxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcclxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XHJcbmltcG9ydCBtb3JnYW4gZnJvbSBcIm1vcmdhblwiO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XHJcbmltcG9ydCBkZXRlY3RQb3J0IGZyb20gXCJkZXRlY3QtcG9ydFwiO1xyXG5pbXBvcnQgY2hhbGsgZnJvbSBcImNoYWxrXCI7XHJcblxyXG4vLyBhcGlcclxuaW1wb3J0IGF1dGggZnJvbSBcIi4vYXBpL2F1dGguanNcIjtcclxuaW1wb3J0IHBvc3RzIGZyb20gXCIuL2FwaS9wb3N0cy5qc1wiO1xyXG5pbXBvcnQgZG9jcyBmcm9tIFwiLi91dGlscy9hcGktZG9jLmpzXCI7XHJcblxyXG4vLyB1dGlsc1xyXG5pbXBvcnQgeyBhdXRoZW50aWNhdGVVc2VyIH0gZnJvbSBcIi4vdXRpbHMvYXV0aC5qc1wiO1xyXG5cclxuLy8gbW9uZ28gZGJcclxuY29uc3QgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xyXG5kYi5vbihcImVycm9yXCIsIGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCBcIk1vbmdvREIgY29ubmVjdGlvbiBlcnJvcjpcIikpO1xyXG5tb25nb29zZS5jb25uZWN0KFxyXG4gIFwibW9uZ29kYitzcnY6Ly90ZXN0OjEyMzRAY2x1c3RlcjAubW5xNXQubW9uZ29kYi5uZXQvbXlGaXJzdERhdGFiYXNlP3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eVwiLFxyXG4gIHtcclxuICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcclxuICB9XHJcbik7XHJcbm1vbmdvb3NlLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcclxuXHJcbi8vIHNlcnZlciBzZXR1cFxyXG5sZXQgcG9ydDtcclxuYXN5bmMgZnVuY3Rpb24gY29uZmlnU2VydmVyKCkge1xyXG4gIHBvcnQgPSAzMDAwIHx8IChhd2FpdCBkZXRlY3RQb3J0KDMwMDApKTtcclxufVxyXG5jb25maWdTZXJ2ZXIoKTtcclxuXHJcbi8vIGV4cHJlc3Mgc2V0dXBcclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5hcHAudXNlKGNvcnMoKSk7XHJcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xyXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcclxuYXBwLnVzZShtb3JnYW4oXCJkZXZcIikpOyAvLyBsb2cgcmVxdWVzdFxyXG5cclxuLy8gZXhwcmVzcyByb3V0ZXJzXHJcbmFwcC51c2UoXCIvXCIsIGF1dGgpO1xyXG5hcHAudXNlKFwiL3Bvc3RzXCIsIGF1dGhlbnRpY2F0ZVVzZXIsIHBvc3RzKTtcclxuXHJcbi8vIGFwaSBkb2NzXHJcbmFwcC51c2UoXCIvYXBpXCIsIGRvY3MpO1xyXG5cclxuLy8gc3RhcnRcclxuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PlxyXG4gIGNvbnNvbGUubG9nKFxyXG4gICAgYCR7Y2hhbGsud2hpdGVcclxuICAgICAgLmJnSGV4KFwiIzQxYjg4M1wiKVxyXG4gICAgICAuYm9sZChgVlVFIFRJTCBTRVJWRVIgSVMgUlVOTklORyBPTiAke3BvcnR9YCl9YFxyXG4gIClcclxuKTtcclxuIl19