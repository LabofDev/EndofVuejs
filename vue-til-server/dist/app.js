"use strict";

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _morgan = _interopRequireDefault(require("morgan"));

var _mongoose = _interopRequireDefault(require("mongoose"));

var _detectPort = _interopRequireDefault(require("detect-port"));

var _chalk = _interopRequireDefault(require("chalk"));

var _auth = _interopRequireDefault(require("./api/auth.js"));

var _posts = _interopRequireDefault(require("./api/posts.js"));

var _apiDoc = _interopRequireDefault(require("./utils/api-doc.js"));

var _auth2 = require("./utils/auth.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// libs
// api
// utils
// mongo db
const db = _mongoose.default.connection;
db.on("error", console.error.bind(console, "MongoDB connection error:"));

_mongoose.default.connect("mongodb+srv://test:1234@cluster0.mnq5t.mongodb.net/myFirstDatabase?retryWrites=true&w=majority", {
  useNewUrlParser: true
});

_mongoose.default.Promise = global.Promise; // server setup

let port;

async function configServer() {
  port = 3000 || (await (0, _detectPort.default)(3000));
}

configServer(); // express setup

const app = (0, _express.default)();
app.use((0, _cors.default)());
app.use(_bodyParser.default.urlencoded({
  extended: true
}));
app.use(_bodyParser.default.json());
app.use((0, _morgan.default)("dev")); // log request
// express routers

app.use("/", _auth.default);
app.use("/posts", _auth2.authenticateUser, _posts.default); // api docs

app.use("/api", _apiDoc.default); // start

app.listen(port, () => console.log(`${_chalk.default.white.bgHex("#41b883").bold(`VUE TIL SERVER IS RUNNING ON ${port}`)}`));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZGIiLCJtb25nb29zZSIsImNvbm5lY3Rpb24iLCJvbiIsImNvbnNvbGUiLCJlcnJvciIsImJpbmQiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwiUHJvbWlzZSIsImdsb2JhbCIsInBvcnQiLCJjb25maWdTZXJ2ZXIiLCJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsImF1dGgiLCJhdXRoZW50aWNhdGVVc2VyIiwicG9zdHMiLCJkb2NzIiwibGlzdGVuIiwibG9nIiwiY2hhbGsiLCJ3aGl0ZSIsImJnSGV4IiwiYm9sZCJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFHQTs7OztBQWZBO0FBU0E7QUFLQTtBQUdBO0FBQ0EsTUFBTUEsRUFBRSxHQUFHQyxrQkFBU0MsVUFBcEI7QUFDQUYsRUFBRSxDQUFDRyxFQUFILENBQU0sT0FBTixFQUFlQyxPQUFPLENBQUNDLEtBQVIsQ0FBY0MsSUFBZCxDQUFtQkYsT0FBbkIsRUFBNEIsMkJBQTVCLENBQWY7O0FBQ0FILGtCQUFTTSxPQUFULENBQ0UsZ0dBREYsRUFFRTtBQUNFQyxFQUFBQSxlQUFlLEVBQUU7QUFEbkIsQ0FGRjs7QUFNQVAsa0JBQVNRLE9BQVQsR0FBbUJDLE1BQU0sQ0FBQ0QsT0FBMUIsQyxDQUVBOztBQUNBLElBQUlFLElBQUo7O0FBQ0EsZUFBZUMsWUFBZixHQUE4QjtBQUM1QkQsRUFBQUEsSUFBSSxHQUFHLFNBQVMsTUFBTSx5QkFBVyxJQUFYLENBQWYsQ0FBUDtBQUNEOztBQUNEQyxZQUFZLEcsQ0FFWjs7QUFDQSxNQUFNQyxHQUFHLEdBQUcsdUJBQVo7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsb0JBQVI7QUFDQUQsR0FBRyxDQUFDQyxHQUFKLENBQVFDLG9CQUFXQyxVQUFYLENBQXNCO0FBQUVDLEVBQUFBLFFBQVEsRUFBRTtBQUFaLENBQXRCLENBQVI7QUFDQUosR0FBRyxDQUFDQyxHQUFKLENBQVFDLG9CQUFXRyxJQUFYLEVBQVI7QUFDQUwsR0FBRyxDQUFDQyxHQUFKLENBQVEscUJBQU8sS0FBUCxDQUFSLEUsQ0FBd0I7QUFFeEI7O0FBQ0FELEdBQUcsQ0FBQ0MsR0FBSixDQUFRLEdBQVIsRUFBYUssYUFBYjtBQUNBTixHQUFHLENBQUNDLEdBQUosQ0FBUSxRQUFSLEVBQWtCTSx1QkFBbEIsRUFBb0NDLGNBQXBDLEUsQ0FFQTs7QUFDQVIsR0FBRyxDQUFDQyxHQUFKLENBQVEsTUFBUixFQUFnQlEsZUFBaEIsRSxDQUVBOztBQUNBVCxHQUFHLENBQUNVLE1BQUosQ0FBV1osSUFBWCxFQUFpQixNQUNmUCxPQUFPLENBQUNvQixHQUFSLENBQ0csR0FBRUMsZUFBTUMsS0FBTixDQUNBQyxLQURBLENBQ00sU0FETixFQUVBQyxJQUZBLENBRU0sZ0NBQStCakIsSUFBSyxFQUYxQyxDQUU2QyxFQUhsRCxDQURGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gbGlic1xyXG5pbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgY29ycyBmcm9tIFwiY29yc1wiO1xyXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcclxuaW1wb3J0IG1vcmdhbiBmcm9tIFwibW9yZ2FuXCI7XHJcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcclxuaW1wb3J0IGRldGVjdFBvcnQgZnJvbSBcImRldGVjdC1wb3J0XCI7XHJcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIjtcclxuXHJcbi8vIGFwaVxyXG5pbXBvcnQgYXV0aCBmcm9tIFwiLi9hcGkvYXV0aC5qc1wiO1xyXG5pbXBvcnQgcG9zdHMgZnJvbSBcIi4vYXBpL3Bvc3RzLmpzXCI7XHJcbmltcG9ydCBkb2NzIGZyb20gXCIuL3V0aWxzL2FwaS1kb2MuanNcIjtcclxuXHJcbi8vIHV0aWxzXHJcbmltcG9ydCB7IGF1dGhlbnRpY2F0ZVVzZXIgfSBmcm9tIFwiLi91dGlscy9hdXRoLmpzXCI7XHJcblxyXG4vLyBtb25nbyBkYlxyXG5jb25zdCBkYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XHJcbmRiLm9uKFwiZXJyb3JcIiwgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsIFwiTW9uZ29EQiBjb25uZWN0aW9uIGVycm9yOlwiKSk7XHJcbm1vbmdvb3NlLmNvbm5lY3QoXHJcbiAgXCJtb25nb2RiK3NydjovL3Rlc3Q6MTIzNEBjbHVzdGVyMC5tbnE1dC5tb25nb2RiLm5ldC9teUZpcnN0RGF0YWJhc2U/cmV0cnlXcml0ZXM9dHJ1ZSZ3PW1ham9yaXR5XCIsXHJcbiAge1xyXG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxyXG4gIH1cclxuKTtcclxubW9uZ29vc2UuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xyXG5cclxuLy8gc2VydmVyIHNldHVwXHJcbmxldCBwb3J0O1xyXG5hc3luYyBmdW5jdGlvbiBjb25maWdTZXJ2ZXIoKSB7XHJcbiAgcG9ydCA9IDMwMDAgfHwgKGF3YWl0IGRldGVjdFBvcnQoMzAwMCkpO1xyXG59XHJcbmNvbmZpZ1NlcnZlcigpO1xyXG5cclxuLy8gZXhwcmVzcyBzZXR1cFxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcbmFwcC51c2UoY29ycygpKTtcclxuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XHJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xyXG5hcHAudXNlKG1vcmdhbihcImRldlwiKSk7IC8vIGxvZyByZXF1ZXN0XHJcblxyXG4vLyBleHByZXNzIHJvdXRlcnNcclxuYXBwLnVzZShcIi9cIiwgYXV0aCk7XHJcbmFwcC51c2UoXCIvcG9zdHNcIiwgYXV0aGVudGljYXRlVXNlciwgcG9zdHMpO1xyXG5cclxuLy8gYXBpIGRvY3NcclxuYXBwLnVzZShcIi9hcGlcIiwgZG9jcyk7XHJcblxyXG4vLyBzdGFydFxyXG5hcHAubGlzdGVuKHBvcnQsICgpID0+XHJcbiAgY29uc29sZS5sb2coXHJcbiAgICBgJHtjaGFsay53aGl0ZVxyXG4gICAgICAuYmdIZXgoXCIjNDFiODgzXCIpXHJcbiAgICAgIC5ib2xkKGBWVUUgVElMIFNFUlZFUiBJUyBSVU5OSU5HIE9OICR7cG9ydH1gKX1gXHJcbiAgKVxyXG4pO1xyXG4iXX0=